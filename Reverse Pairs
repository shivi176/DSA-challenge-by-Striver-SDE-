class Solution {
    public int reversePairs(int[] nums) {
        if (nums.length < 2) return 0;

        int n = nums.length;
        int[] temp = new int[n];

        return mergeSortAndCount(nums, temp, 0, n - 1);
    }

    private int mergeSortAndCount(int[] nums, int[] temp, int left, int right) {
        if (left >= right) return 0;

        int mid = left + (right - left) / 2;
        int count = mergeSortAndCount(nums, temp, left, mid) +
                    mergeSortAndCount(nums, temp, mid + 1, right);

        // Count reverse pairs
        int j = mid + 1;
        for (int i = left; i <= mid; i++) {
            while (j <= right && (long) nums[i] > 2L * nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }

        // Merge step (in-place using temp array)
        int i = left;
        j = mid + 1;
        int k = left;

        while (i <= mid && j <= right) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }

        while (i <= mid) temp[k++] = nums[i++];
        while (j <= right) temp[k++] = nums[j++];

        for (i = left; i <= right; i++) {
            nums[i] = temp[i];
        }

        return count;
    }
}
